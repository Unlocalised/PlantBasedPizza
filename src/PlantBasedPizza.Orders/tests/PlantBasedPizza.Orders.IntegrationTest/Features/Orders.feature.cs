// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PlantBasedPizza.Orders.IntegrationTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OrdersFeature : object, Xunit.IClassFixture<OrdersFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Orders.feature"
#line hidden
        
        public OrdersFeature(OrdersFeature.FixtureData fixtureData, PlantBasedPizza_Orders_IntegrationTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Orders", "\tOrdersFeature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="LoyaltyPointsUpdatedAreCached")]
        [Xunit.TraitAttribute("FeatureTitle", "Orders")]
        [Xunit.TraitAttribute("Description", "LoyaltyPointsUpdatedAreCached")]
        [Xunit.TraitAttribute("Category", "LoyaltyPointUpdatesAreCached")]
        public void LoyaltyPointsUpdatedAreCached()
        {
            string[] tagsOfScenario = new string[] {
                    "LoyaltyPointUpdatesAreCached"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LoyaltyPointsUpdatedAreCached", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("a LoyaltyPointsUpdatedEvent is published for customer james, with a points total " +
                        "of 50.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Then("loyalty points should be cached for james with a total amount of 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="OrderCanBeCreated")]
        [Xunit.TraitAttribute("FeatureTitle", "Orders")]
        [Xunit.TraitAttribute("Description", "OrderCanBeCreated")]
        [Xunit.TraitAttribute("Category", "OrderWorkflow")]
        public void OrderCanBeCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "OrderWorkflow"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OrderCanBeCreated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
    testRunner.Given("a new order is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
    testRunner.When("a CREATEORDERTEST is added to order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
    testRunner.And("order is submitted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
    testRunner.Then("order should contain a Submitted order. event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CanHandleOrderPreparingEvent")]
        [Xunit.TraitAttribute("FeatureTitle", "Orders")]
        [Xunit.TraitAttribute("Description", "CanHandleOrderPreparingEvent")]
        [Xunit.TraitAttribute("Category", "CanProcessOrderPreparingEvent")]
        public void CanHandleOrderPreparingEvent()
        {
            string[] tagsOfScenario = new string[] {
                    "CanProcessOrderPreparingEvent"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CanHandleOrderPreparingEvent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
    testRunner.Given("a OrderPreparingEvent is published for customer james", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CanHandleOrderBakedEvent")]
        [Xunit.TraitAttribute("FeatureTitle", "Orders")]
        [Xunit.TraitAttribute("Description", "CanHandleOrderBakedEvent")]
        [Xunit.TraitAttribute("Category", "CanProcessOrderBakedEvent")]
        public void CanHandleOrderBakedEvent()
        {
            string[] tagsOfScenario = new string[] {
                    "CanProcessOrderBakedEvent"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CanHandleOrderBakedEvent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
    testRunner.Given("a OrderBakedEvent is published for customer james", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CanHandleOrderPrepCompleteEvent")]
        [Xunit.TraitAttribute("FeatureTitle", "Orders")]
        [Xunit.TraitAttribute("Description", "CanHandleOrderPrepCompleteEvent")]
        [Xunit.TraitAttribute("Category", "CanProcessOrderPrepCompleteEvent")]
        public void CanHandleOrderPrepCompleteEvent()
        {
            string[] tagsOfScenario = new string[] {
                    "CanProcessOrderPrepCompleteEvent"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CanHandleOrderPrepCompleteEvent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
    testRunner.Given("a OrderPrepCompleteEvent is published for customer james", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CanHandleOrderQualityCheckedEvent")]
        [Xunit.TraitAttribute("FeatureTitle", "Orders")]
        [Xunit.TraitAttribute("Description", "CanHandleOrderQualityCheckedEvent")]
        [Xunit.TraitAttribute("Category", "CanProcessOrderQualityCheckedEvent")]
        public void CanHandleOrderQualityCheckedEvent()
        {
            string[] tagsOfScenario = new string[] {
                    "CanProcessOrderQualityCheckedEvent"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CanHandleOrderQualityCheckedEvent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
    testRunner.Given("a OrderQualityCheckedEvent is published for customer james", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CanHandleDriverDeliveredEvent")]
        [Xunit.TraitAttribute("FeatureTitle", "Orders")]
        [Xunit.TraitAttribute("Description", "CanHandleDriverDeliveredEvent")]
        [Xunit.TraitAttribute("Category", "CanProcessDriverDeliveredEvent")]
        public void CanHandleDriverDeliveredEvent()
        {
            string[] tagsOfScenario = new string[] {
                    "CanProcessDriverDeliveredEvent"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CanHandleDriverDeliveredEvent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
    testRunner.Given("a DriverDeliveredOrderEvent is published for customer james", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CanHandleDriverCollectedEvent")]
        [Xunit.TraitAttribute("FeatureTitle", "Orders")]
        [Xunit.TraitAttribute("Description", "CanHandleDriverCollectedEvent")]
        [Xunit.TraitAttribute("Category", "CanProcessDriverCollectedEvent")]
        public void CanHandleDriverCollectedEvent()
        {
            string[] tagsOfScenario = new string[] {
                    "CanProcessDriverCollectedEvent"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CanHandleDriverCollectedEvent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
    testRunner.Given("a DriverCollectedOrderEvent is published for customer james", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OrdersFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OrdersFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

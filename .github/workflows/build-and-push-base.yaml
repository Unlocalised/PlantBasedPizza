name: Build & Push Base Workflow

on:
  workflow_call:
    inputs:
      service-name:
          required: true
          type: string
      image-name:
          required: true
          type: string
      dockerfile:
          required: true
          type: string
      integration-test-compose-file:
          required: true
          type: string
      integration-test-folder:
          required: true
          type: string
    secrets:
      deploy-role-arn:
        description: 'The role for the AWS IAM role to use for deployment'
        required: true
      ecr-registry:
          required: true
      DD_API_KEY:
          required: true
      DD_APP_KEY:
          required: true

permissions:
  id-token: write
  contents: read

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    name: Datadog Static Analyzer
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Check code meets quality and security standards
      id: datadog-static-analysis
      uses: DataDog/datadog-static-analyzer-github-action@v1
      with:
        dd_api_key: ${{ secrets.DD_API_KEY }}
        dd_app_key: ${{ secrets.DD_APP_KEY }}
        dd_service: ${{ inputs.service-name }}
        dd_env: ci
        dd_site: datadoghq.eu
        cpu_count: 2
  software-composition-analysis:
    runs-on: ubuntu-latest
    name: Datadog SBOM Generation and Upload
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Check imported libraries are secure and compliant
      id: datadog-software-composition-analysis
      uses: DataDog/datadog-sca-github-action@main
      with:
        dd_api_key: ${{ secrets.DD_API_KEY }}
        dd_app_key: ${{ secrets.DD_APP_KEY }}
        dd_service: ${{ inputs.service-name }}
        dd_env: ci
        dd_site: datadoghq.eu

  test-and-build:
    runs-on: ubuntu-latest
    needs:
      - static-analysis
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: ${{secrets.deploy-role-arn}}
          role-session-name: GitHubActionsSession
      - name: Declare some variables
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: false
          load: true
          tags: ${{ inputs.image-name }}:latest
          context: ./src
          file: ${{ inputs.dockerfile }}
      - name: docker-compose up
        run: docker-compose -f ${{ inputs.integration-test-compose-file }} up -d
      - name: Wait for docker to start
        run: sleep 20
      - name: Run Integration Tests
        run: dotnet test ${{ inputs.integration-test-folder }}
      - name: Teardown
        run: docker-compose -f ${{ inputs.integration-test-compose-file }} down
      - name: Tag With Commit Hash
        run: docker tag ${{inputs.image-name}} ${{secrets.ecr-registry}}/${{inputs.image-name}}:${{ env.sha_short }}
      - uses: aws-actions/amazon-ecr-login@v2
        name: Login to Amazon ECR
        id: login-ecr
      - name: Tag With Commit Hash
        run: docker push ${{secrets.ecr-registry}}/${{inputs.image-name}}:${{ env.sha_short }}
          